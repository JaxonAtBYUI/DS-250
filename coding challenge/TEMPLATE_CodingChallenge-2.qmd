---
title: "Fall 2022 - Final Coding Challenge"
subtitle: "Course DS 250"
author: "Student Name"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
# Read in libraries

import altair as alt
import pandas as pd
import numpy as np
import matplotlib

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics


```

```{python}
# Read in the names data
names = pd.read_csv("names_year.csv")

kobe = (names.query("name == 'Kobe'").filter(items=["name", "year", "Total"]))

kobe = (kobe.assign(age = 2022 - kobe.year))
kobe2 = (kobe.query("age >= 18 and age < 26"))

```

# Question 1:

### Re-create the graph for the likely age of someone named Kobe.  

```{python}
# Kobe Data and graph
chart2 = alt.Chart(kobe).mark_line(color="green").encode(
    alt.X('age', title="Age" ),
    alt.Y('Total:Q', title="Frequency")
).properties(
    title={
      "text": ["Likely Age of Someone Named Kobe"], 
      "subtitle": ["Who isn't Kobe Bryant"]
    }
)


chart1 = alt.Chart(kobe2).mark_area(color='lightgreen'
).encode(
    alt.X('age'),
    alt.Y('Total:Q')
)
chart3 = chart1 + chart2

chart3.configure_title(
    fontSize=16,
    color='red',
    subtitleColor='green'
)
```



# Question 2:

### Dealing with Missing Data

Using the dataframe below (called "steve"), perform the following actions:

1. Replace all unofficial missing values with Python-recognized missing values
2. Replace all the missing values with the average *excluding* the zeros
3. Report the mean and standard deviation of the cleaned data (*including the zeros*)


```{python}
steve = pd.DataFrame({"steve": ['N/A', 15, 22, 45, 31, -999, 21, 2, 0, 0, 0, 'broken', 19, 19, 36, 27, 0, np.nan, 0, 33, 42, -999]})

# Cleaning data
steve = (steve
    # generic data fixing
    .replace(-999, np.nan)
    .replace("N/A", np.nan)
    .replace("broken", np.nan)
)
steve = steve.replace(np.nan, steve.query("steve != 0").mean()
)

print(f"Mean: {steve.mean()}\n Standard Deviation: {steve.std()}")

```

# Question 3:

### Make a histogram of the cleaned data including the zeros


```{python}
# Histogram

alt.Chart(steve).mark_bar().encode(
    alt.X("steve:Q", bin=True, title="Steve"),
    alt.Y('count()', title="Count of Records")
)
```

# Question 4:

### Machine Learning

1. Use the clean star wars data to predict if someone is a female by how they responded to the surevey questions
2. Report your accuracy and a feature importance plot with the top 25 most important features.
3. Use test_size = .20 and random_state = 2022 in train_test_split()
4. Use the RandomForestClassifier(random_state = 2022) method.


```{python}
# Read in clean dataset
url = "http://byuistats.github.io/CSE250-Course/data/clean_starwars.csv"
sw_dat = pd.read_csv(url)

```


```{python}
# Define x and y
# Split data into train/test
# Fit a classifier
# Include Accuracy and Feature importance graph with top 25 most important features


```
